#!/usr/bin/perl

require "scripts/options.pl";

for (my $idx = 0; $idx < scalar(@ARGV); $idx++) {
    $arg = $ARGV[$idx];

    if ($arg eq "-dryrun") { $dryrun = 1; }

    if ($arg eq "-v") { $verbose = 1; }

    if ($arg eq "-all") { $allTables = 1; }

    if ($arg eq "-date") { $importDate = $ARGV[$idx+1]; $idx++; next; }

    if ($arg !~ /^\-/) { $tables{$arg} = 1; }
}

if (scalar(@ARGV) == 0 || ! defined($importDate)) {
    print "\nusage: ./02_create_final -date <YYYYMMDD> [ -v ] [ -dryrun ] ( -all | <tables> )\n";
    exit(0);
}

if (&db_exists(&option("dbName")."_".$importDate) != 1) {
    print "\nERROR: database \"".&option("dbName")."_".$importDate."\" does not exist.\n";
    exit(1);
}

if ( ! defined($allTables) && (scalar(keys %tables)) == 0) {
    print "\nusage: ./02_create_final -date <YYYYMMDD> [ -v ] [ -dryrun ] ( -all | <tables> ) - please use -all or a list of tables\n\n";
    exit(0);
}

if (defined($allTables) && (scalar(keys %tables)) > 0) {
    print "\nusage: ./02_create_final -date <YYYYMMDD> [ -v ] [ -dryrun ] ( -all | <tables> ) - do not use -all and list files on the command line\n\n";
    exit(0);
}

$inc = 10000;

open T, "scripts/tableCols.txt";
while (<T>) {
    chomp;
    $line = $_;

    if ($line ne "" && $line !~ / /) {
        $tName = $line;
        $idx = 0;
    } else {
        if ($line ne "") {
            @parts = split ' ', $line;
            $tablesFound{$tName} = 1;
            $columns{$tName}[$idx] = shift @parts;
            $colTypes{$tName}[$idx] = join ' ', @parts;

            # print "columns{".$tName."}[".$idx."] = \"".$columns{$tName}[$idx]."\"\n";
            # print "colTypes{".$tName."}[".$idx."] = \"".$colTypes{$tName}[$idx]."\"\n";

            $idx++;
        }
    }
}

if (defined($allTables)) { %tables = %tablesFound; }

print "\ntables count = ".(scalar(keys %tables))."\n\n";

if (defined($dryrun)) {
    open M, "| cat";
} else {
    open M, "| ".$myV."_".$importDate;
}

print M "set max_error_count = 65535;\n";

foreach (sort keys %tables) {
    $table = $_;

    $cmd = "echo \"select max(pk) from ".$table."_cd;\" | ".$myQ."_".$importDate;
    $pk = `$cmd`;
    chomp($pk);

    print M "drop table if exists ".$table.";\n";

    undef @cols;

    $idx = 0;
    while (defined($columns{$table}[$idx])) {
        $type = $colTypes{$table}[$idx];
        if ($type eq "date" || $type eq "datetime") { $type = "varchar(100)"; }
        push @cols, "    ".$columns{$table}[$idx]." ".$type;
        $idx++;
    }

    $sql = "create table ".$table." (\n";
    $sql .= join ",\n", @cols;
    $sql .= "\n);\n";

    print M $sql;

    if (defined($verbose)) { print M "show warnings;\n"; }

    $idx = 0;
    while (defined($columns{$table}[$idx])) {
        if ($colTypes{$table}[$idx] eq "date") {
            print M "alter table ".$table." add index(".$columns{$table}[$idx]."(10));\n";
        }
        if ($colTypes{$table}[$idx] eq "datetime") {
            print M "alter table ".$table." add index(".$columns{$table}[$idx]."(20));\n";
        }
        if ($columns{$table}[$idx] eq "filing_id") {
            print M "alter table ".$table." add index(filing_id);\n";
        }
        if ($columns{$table}[$idx] eq "amend_id") {
            print M "alter table ".$table." add index(amend_id);\n";
        }
        if ($columns{$table}[$idx] eq "filer_id") {
            print M "alter table ".$table." add index(filer_id);\n";
        }
        if ($columns{$table}[$idx] =~ /_naml$/) {
            print M "alter table ".$table." add index(".$columns{$table}[$idx]."(20));\n";
        }
        $idx++;
    }

    undef @cols;

    $idx = 0;
    while (defined($columns{$table}[$idx])) {
        push @cols, "    ".$columns{$table}[$idx];
        $idx++;
    }

    for ($idx = 0; $idx <= $pk; $idx = $idx + $inc) {

        print M "insert into ".$table." (\n";
        print M (join ",\n", @cols)."\n";
        print M ") select \n";
        print M (join ",\n", @cols)."\n";
        print M "from ".$table."_cd ";
        print M "where pk > ".$idx." and pk <= ".($idx+$inc).";\n";

        if (defined($verbose)) { print M "show warnings;\n"; }
    }
}

close M;

exit(0);

