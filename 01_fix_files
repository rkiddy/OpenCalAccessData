#!/usr/bin/perl

require "scripts/options.pl";

$usage = "\nusage: ./01_fix_files [ -date <YYYYMMDD> ] ( -all | <files> )\n\n";

$verbose = 0;
$no_orig = 0;

$url = "https://campaignfinance.cdn.sos.ca.gov/dbwebexport.zip";
# $url = "http://opencalaccess.org/dbwebexport.zip";

for ($idx = 0; $idx < scalar(@ARGV); $idx++) {
    $arg = $ARGV[$idx];

    if ($arg eq "-all") { $allFiles = 1; }
    if ($arg eq "-v") { $verbose = 1; }
    if ($arg eq "-vv") { $verbose = 2; }
    if ($arg eq "-date") { $date = $ARGV[$idx+1]; $idx++ }
    if ($arg eq "-no-orig") { $no_orig = 1; }
    if ($arg eq "-test") { $test = 1; }
    if ($arg eq "-fullErr") { $fullErr = 1; }

    if ($arg !~ /^\-/) { $files{$arg} = 1; }
}

sub remove_field {
    $toRemove = shift;
    local @q = @_;

    undef @next;
    for ($idx = 0; $idx < scalar(@q); $idx++) {
        if ($idx != $toRemove) { push @next, $q[$idx]; }
    }
    return @next;
}

sub remove_last_field {
    local @q = @_;

    undef @next;
    for (my $idx = 0; $idx < scalar(@q)-1; $idx++) {
        push @next, $q[$idx];
    }
    return @next;
}

sub add_empty_last_field {
    local @q = @_;
    undef @next;

    for ($idx = 0; $idx < scalar(@q); $idx++) { push @next, $q[$idx]; }

    push @next, "";

    return @next;
}

sub replace_at_field {
    $toAddIdx = shift;
    $toAddValue = shift;
    local @q = @_;

    undef @next;

    for ($idx = 0; $idx < $toAddIdx; $idx++) { push @next, $q[$idx]; }
    push @next, $toAddValue;
    for ($idx = $toAddIdx+1; $idx < scalar(@q); $idx++) { push @next, $q[$idx]; }

    return @next;
}

sub add_field {
    $toAddIdx = shift;
    $toAddValue = shift;

    local @q = @_;

    undef @next;

    for ($idx = 0; $idx < $toAddIdx; $idx++) { push @next, $q[$idx]; }
    push @next, $toAddValue;
    for ($idx = $toAddIdx; $idx < scalar(@q); $idx++) { push @next, $q[$idx]; }

    return @next;
}

%size = ("ACRONYMS_CD.TSV" => 4,
         "ADDRESS_CD.TSV" => 7,
         "BALLOT_MEASURES_CD.TSV" => 6,
         "CVR2_CAMPAIGN_DISCLOSURE_CD.TSV" => 38,
         "CVR2_LOBBY_DISCLOSURE_CD.TSV" => 13,
         "CVR2_REGISTRATION_CD.TSV" => 12,
         "CVR2_SO_CD.TSV" => 33,
         "CVR3_VERIFICATION_INFO_CD.TSV" => 13,
         "CVR_CAMPAIGN_DISCLOSURE_CD.TSV" => 86,
         "CVR_E530_CD.TSV" => 32,
         "CVR_F470_CD.TSV" => 0,
         "CVR_LOBBY_DISCLOSURE_CD.TSV" => 52,
         "CVR_REGISTRATION_CD.TSV" => 71,
         "CVR_SO_CD.TSV" => 54,
         "DEBT_CD.TSV" => 33,
         "EFS_FILING_LOG_CD.TSV" => 6,
         "EXPN_CD.TSV" => 53,
         "F495P2_CD.TSV" => 8,
         "F501_502_CD.TSV" => 54,
         "F690P2_CD.TSV" => 11,
         "FILERNAME_CD.TSV" => 17,
         "FILERS_CD.TSV" => 1,
         "FILER_ACRONYMS_CD.TSV" => 2,
         "FILER_ADDRESS_CD.TSV" => 5,
         "FILER_ETHICS_CLASS_CD.TSV" => 3,
         "FILER_FILINGS_CD.TSV" => 16,
         "FILER_INTERESTS_CD.TSV" => 4,
         "FILER_LINKS_CD.TSV" => 9,
         "FILER_STATUS_TYPES_CD.TSV" => 2,
         "FILER_TO_FILER_TYPE_CD.TSV" => 16,
         "FILER_TYPES_CD.TSV" => 5,
         "FILER_TYPE_PERIODS_CD.TSV" => 0,
         "FILER_XREF_CD.TSV" => 4,
         "FILINGS_CD.TSV" => 2,
         "FILING_PERIOD_CD.TSV" => 7,
         "GROUP_TYPES_CD.TSV" => 3,
         "HDR_CD.TSV" => 9,
         "HEADER_CD.TSV" => 12,
         "IMAGE_LINKS_CD.TSV" => 5,
         "LATT_CD.TSV" => 20,
         "LCCM_CD.TSV" => 24,
         "LEGISLATIVE_SESSIONS_CD.TSV" => 3,
         "LEMP_CD.TSV" => 24,
         "LEXP_CD.TSV" => 25,
         "LOAN_CD.TSV" => 49,
         "LOBBYING_CHG_LOG_CD.TSV" => 24,
         "LOBBYIST_CONTRIBUTIONS1_CD.TSV" => 7,
         "LOBBYIST_CONTRIBUTIONS2_CD.TSV" => 7,
         "LOBBYIST_CONTRIBUTIONS3_CD.TSV" => 7,
         "LOBBYIST_EMPLOYER1_CD.TSV" => 20,
         "LOBBYIST_EMPLOYER2_CD.TSV" => 20,
         "LOBBYIST_EMPLOYER3_CD.TSV" => 20,
         "LOBBYIST_EMPLOYER_FIRMS1_CD.TSV" => 5,
         "LOBBYIST_EMPLOYER_FIRMS2_CD.TSV" => 5,
         "LOBBYIST_EMPLOYER_HISTORY_CD.TSV" => 0,
         "LOBBYIST_EMP_LOBBYIST1_CD.TSV" => 6,
         "LOBBYIST_EMP_LOBBYIST2_CD.TSV" => 6,
         "LOBBYIST_FIRM1_CD.TSV" => 18,
         "LOBBYIST_FIRM2_CD.TSV" => 18,
         "LOBBYIST_FIRM3_CD.TSV" => 18,
         "LOBBYIST_FIRM_EMPLOYER1_CD.TSV" => 11,
         "LOBBYIST_FIRM_EMPLOYER2_CD.TSV" => 11,
         "LOBBYIST_FIRM_HISTORY_CD.TSV" => 0,
         "LOBBYIST_FIRM_LOBBYIST1_CD.TSV" => 6,
         "LOBBYIST_FIRM_LOBBYIST2_CD.TSV" => 6,
         "LOBBY_AMENDMENTS_CD.TSV" => 42,
         "LOOKUP_CODES_CD.TSV" => 3,
         "LOTH_CD.TSV" => 20,
         "LPAY_CD.TSV" => 26,
         "NAMES_CD.TSV" => 10,
         "RCPT_CD.TSV" => 63,
         "RECEIVED_FILINGS_CD.TSV" => 7,
         "REPORTS_CD.TSV" => 8,
         "S401_CD.TSV" => 37,
         "S496_CD.TSV" => 12,
         "S497_CD.TSV" => 41,
         "S498_CD.TSV" => 37,
         "SMRY_CD.TSV" => 9,
         "SPLT_CD.TSV" => 8,
         "TEXT_MEMO_CD.TSV" => 7);

sub size {
    local @p = split /\//, $_[0];
    return $size{$p[-1]};
}

sub compare_results { }

if (defined($test)) {

    print "testing..,\n";

    print "remove_field\n";

    @p = (1, 2, 3);
    @p = &remove_field(1, @p);
    $r = join('-',@p);
    print "want \"1-3\", got: \"".$r."\"\n";

    @p = (1, 2, 3);
    @p = &remove_field(0, @p);
    $r = join('-',@p);
    print "want \"2-3\", got: \"".$r."\"\n";

    @p = (1, 2, 3);
    @p = &remove_field(2, @p);
    $r = join('-',@p);
    print "want \"1-2\", got: \"".$r."\"\n";

    print "remove_last_field\n";

    @p = (1, 2, 3);
    @p = &remove_last_field(@p);
    $r = join('-',@p);
    print "want \"1-2\", got: \"".$r."\"\n";

    print "add_empty_last_field\n";

    @p = (1, 2, 3);
    @p = &add_empty_last_field(@p);
    $r = join('-',@p);
    print "want \"1-2-3-\", got: \"".$r."\"\n";
    
    print "replace_at_field\n";

    @p = (1, 2, 3);
    @p = &replace_at_field(1, "x", @p);
    $r = join('-',@p);
    print "want: \"1-x-3\", got \"".$r."\"\n";

    @p = (1, 2, 3);
    @p = &replace_at_field(0, "x", @p);
    $r = join('-',@p);
    print "want: \"x-2-3\", got \"".$r."\"\n";

    @p = (1, 2, 3);
    @p = &replace_at_field(2, "x", @p);
    $r = join('-',@p);
    print "want: \"1-2-x\", got \"".$r."\"\n";

    print "add_field\n";

    @p = (1, 2, 3);
    @p = &add_field(1, "x", @p);
    $r = join('-',@p);
    print "want: \"1-x-2-3\", got \"".$r."\"\n";

    @p = (1, 2, 3);
    @p = &add_field(0, "x", @p);
    $r = join('-',@p);
    print "want: \"x-1-2-3\", got \"".$r."\"\n";

    @p = (1, 2, 3);
    @p = &add_field(2, "x", @p);
    $r = join('-',@p);
    print "want: \"1-2-x-3\", got \"".$r."\"\n";

    # sub compare_results

    exit(0);
}

if ($verbose > 0) {
    if (defined($allFiles)) {
        print "  option: processing all files...\n";
    }
    print "  option: verbose = ".$verbose."\n";
    print "  option: no_orig = ".$no_orig."\n";
    if (defined($date)) {
        print "  option: pre-defined date = \"".$date."\"\n";
    }
}

if ( ! defined($date) && ( ! defined($allFiles) && scalar(keys %files) == 0)) {
    print $usage;
    exit(0);
}

$data_dir = option("projectDir")."/data_".$date;

print "  option: data_dir: \"".$data_dir."\"\n";

if ( ! -d $data_dir) {

    print $usage;
    exit(0);
}

if ($verbose > 0 && scalar(%files) > 0) {
    foreach (sort keys %files) { print "  using file: \"".$_."\"\n"; }
}

if (defined($allFiles)) {

    $cmd = option("find")." ".$data_dir."/CalAccess -name \\*_CD.TSV";
    print "cmd: ".$cmd."\n";

    @files_found = `$cmd`;
    chomp(@files_found);

    foreach (@files_found) {
        $full_file = $_;
        @parts = split '/', $full_file;
        $files{pop(@parts)} = $full_file;
    }

} else {

    foreach (keys %files) {
        $file = $_;
        $file = uc($file);
        $cmd = option("find")." ".$data_dir." -name ".$file;

        $full_file = `$cmd`;
        chomp($full_file);
        $nextFiles{$file} = $full_file;
    }
    %files = %nextFiles;
}

if ($verbose > 0) {
    foreach (keys %files) {
        print "  target file: ".$_." -> ".$files{$_}."\n";
    }
}

sub usual_fixes {

    $nextLine = $_[0];

    # eliminate extra backslashes and spaces in front of tabs
    #
    $nextLine =~ s/\\*\t/\t/g;
    $nextLine =~ s/ *\t/\t/g;

    # same for end of lines
    #
    $nextLine =~ s/\\*\r\n/\r\n/;
    $nextLine =~ s/ *\t/\t/g;

    $nextLine =~ s/^ *//;

    return $nextLine;
}

sub fix_file {

    local $file = $_[0];

    $num = 0;
    $bad = 0;

    if (defined($allFiles) || defined($files{$file})) {

        $found_file = $files{$file};

        $out_file = $found_file."_FIXED";

        print "\nfixing ".$found_file."...";

        open F1, $found_file;
        open F2, "> ".$out_file;

        while (<F1>) {
            $line = $_;

            $line = &usual_fixes($line);

            @p = split '\t', $line;

            # file-specific fixes here.
            #
            # SKIPPING file-specific fixes

            if (scalar(@p) != &size($found_file)) { $bad++; if (defined($fullErr)) { print "\nBAD: ".$line."\n" }}

            print F2 $line;
            $num++;
        }

        close F1;
        close F2;

        &compare_results($found_file, $out_file);
    }

    print "    total lines # ".$num.", bad lines # ".$bad."\n";
}

&fix_file("ACRONYMS_CD.TSV");
&fix_file("ADDRESS_CD.TSV");
&fix_file("BALLOT_MEASURES_CD.TSV");
&fix_file("CVR2_CAMPAIGN_DISCLOSURE_CD.TSV");
&fix_file("CVR2_LOBBY_DISCLOSURE_CD.TSV");
&fix_file("CVR2_REGISTRATION_CD.TSV");
&fix_file("CVR2_SO_CD.TSV");
&fix_file("CVR3_VERIFICATION_INFO_CD.TSV");
&fix_file("CVR_CAMPAIGN_DISCLOSURE_CD.TSV");
&fix_file("CVR_E530_CD.TSV");
&fix_file("CVR_LOBBY_DISCLOSURE_CD.TSV");
&fix_file("CVR_REGISTRATION_CD.TSV");
&fix_file("CVR_SO_CD.TSV");
&fix_file("DEBT_CD.TSV");
&fix_file("EFS_FILING_LOG_CD.TSV");
&fix_file("EXPN_CD.TSV");
&fix_file("F495P2_CD.TSV");
&fix_file("F501_502_CD.TSV");
&fix_file("F690P2_CD.TSV");
&fix_file("FILER_ACRONYMS_CD.TSV");
&fix_file("FILER_ADDRESS_CD.TSV");
&fix_file("FILER_ETHICS_CLASS_CD.TSV");
&fix_file("FILER_FILINGS_CD.TSV");
&fix_file("FILER_INTERESTS_CD.TSV");
&fix_file("FILER_LINKS_CD.TSV");
&fix_file("FILERNAME_CD.TSV");
&fix_file("FILERS_CD.TSV");
&fix_file("FILER_STATUS_TYPES_CD.TSV");
&fix_file("FILER_TYPES_CD.TSV");
&fix_file("FILER_XREF_CD.TSV");
&fix_file("FILING_PERIOD_CD.TSV");
&fix_file("FILINGS_CD.TSV");
&fix_file("GROUP_TYPES_CD.TSV");
&fix_file("HDR_CD.TSV");
&fix_file("HEADER_CD.TSV");
&fix_file("IMAGE_LINKS_CD.TSV");
&fix_file("LATT_CD.TSV");
&fix_file("LCCM_CD.TSV");
&fix_file("LEGISLATIVE_SESSIONS_CD.TSV");
&fix_file("LEMP_CD.TSV");
&fix_file("LEXP_CD.TSV");
&fix_file("LOAN_CD.TSV");
&fix_file("LOBBY_AMENDMENTS_CD.TSV");
&fix_file("LOBBYING_CHG_LOG_CD.TSV");
&fix_file("LOBBYIST_CONTRIBUTIONS1_CD.TSV");
&fix_file("LOBBYIST_CONTRIBUTIONS2_CD.TSV");
&fix_file("LOBBYIST_CONTRIBUTIONS3_CD.TSV");
&fix_file("LOBBYIST_EMP_LOBBYIST1_CD.TSV");
&fix_file("LOBBYIST_EMP_LOBBYIST2_CD.TSV");
&fix_file("LOBBYIST_EMPLOYER1_CD.TSV");
&fix_file("LOBBYIST_EMPLOYER2_CD.TSV");
&fix_file("LOBBYIST_EMPLOYER3_CD.TSV");
&fix_file("LOBBYIST_EMPLOYER_FIRMS1_CD.TSV");
&fix_file("LOBBYIST_EMPLOYER_FIRMS2_CD.TSV");
&fix_file("LOBBYIST_FIRM1_CD.TSV");
&fix_file("LOBBYIST_FIRM2_CD.TSV");
&fix_file("LOBBYIST_FIRM3_CD.TSV");
&fix_file("LOBBYIST_FIRM_EMPLOYER1_CD.TSV");
&fix_file("LOBBYIST_FIRM_EMPLOYER2_CD.TSV");
&fix_file("LOBBYIST_FIRM_LOBBYIST1_CD.TSV");
&fix_file("LOBBYIST_FIRM_LOBBYIST2_CD.TSV");
&fix_file("LOOKUP_CODES_CD.TSV");
&fix_file("LOTH_CD.TSV");
&fix_file("LPAY_CD.TSV");
&fix_file("NAMES_CD.TSV");
&fix_file("RCPT_CD.TSV");
&fix_file("RECEIVED_FILINGS_CD.TSV");
&fix_file("REPORTS_CD.TSV");
&fix_file("S401_CD.TSV");
&fix_file("S496_CD.TSV");
&fix_file("S497_CD.TSV");
&fix_file("S498_CD.TSV");
&fix_file("SMRY_CD.TSV");
&fix_file("SPLT_CD.TSV");
&fix_file("TEXT_MEMO_CD.TSV");

print "\n\nOk\n\n";

exit(0);
